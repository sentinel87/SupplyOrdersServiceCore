using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SupplyOrdersServiceCore.Interfaces;
using DotNetDBF;
using System.IO;
using SupplyOrdersServiceCore.Domain.Models;

namespace SupplyOrdersServiceCore.Services
{
    public class DbfExportService : IExportService
    {
        private readonly ILogger<DbfExportService> _logger;
        private readonly IConfiguration _configuration;
        public DbfExportService(ILogger<DbfExportService>logger, IConfiguration configuration)
        {
            _logger = logger;
            _configuration = configuration;
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
        }

        public async Task<bool> CreateOrderExportFiles(Order order)
        {
            var headerTask = Task.Factory.StartNew<bool>(() => { return CreateOrderHeaderFile(order); });
            var positionsTask = Task.Factory.StartNew<bool>(() => { return CreateOrderProductsFile(order); });

            await Task.WhenAll(headerTask, positionsTask);
            var result1 = headerTask.Result;
            var result2 = positionsTask.Result;

            return result1 && result2;
        }

        public bool CreateOrderHeaderFile(Order order)
        {
            try
            {
                var path = _configuration.GetSection("Parameters").GetValue<string>("DbfTempPath");
                using (Stream fos = File.Open(Path.Combine(path, "OrderHeader.dbf"), FileMode.OpenOrCreate, FileAccess.ReadWrite))
                {
                    var writer = new DBFWriter();
                    writer.CharEncoding = Encoding.GetEncoding(1250);
                    var field1 = new DBFField("id", NativeDbType.Numeric, 8, 0);
                    var field2 = new DBFField("orddat", NativeDbType.Date);
                    var field3 = new DBFField("ordsym", NativeDbType.Char, 25);
                    var field4 = new DBFField("wholesaler", NativeDbType.Char, 6);
                    var field5 = new DBFField("comments", NativeDbType.Char, 254);

                    writer.Fields = new[] { field1, field2, field3, field4, field5 };

                    writer.AddRecord(order.Id, order.CreationDate.Value.Date, order.OrderSymbol, order.Wholesaler.ToString(), "Order generated by Supply Service.");
                    writer.Write(fos);
                }
                return true;
            }
            catch(Exception ex)
            {
                _logger.LogError($"Error during dbf creation (OrderHeader): {ex.Message}");
                return false;
            }
        }

        public bool CreateOrderProductsFile(Order order)
        {
            try
            {
                var path = _configuration.GetSection("Parameters").GetValue<string>("DbfTempPath");
                using (Stream fos = File.Open(Path.Combine(path, "OrderPositions.dbf"), FileMode.OpenOrCreate, FileAccess.ReadWrite))
                {
                    var writer = new DBFWriter();
                    writer.CharEncoding = Encoding.GetEncoding(1250);
                    var field1 = new DBFField("id", NativeDbType.Numeric, 8, 0);
                    var field2 = new DBFField("ordid", NativeDbType.Numeric, 8, 0);
                    var field3 = new DBFField("name", NativeDbType.Char, 42);
                    var field4 = new DBFField("centrid", NativeDbType.Char, 7);
                    var field5 = new DBFField("quantity", NativeDbType.Numeric, 16, 8);
                    var field6 = new DBFField("shortage", NativeDbType.Numeric, 16, 8);
                    var field7 = new DBFField("comments", NativeDbType.Char, 250);

                    writer.Fields = new[] { field1, field2, field3, field4, field5, field6, field7 };

                    foreach (Product product in order.Products)
                    {
                        int shortage = product.Quantity - product.ProcessedQuantity;
                        if (shortage < 0)
                            shortage = 0;
                        string comment = "";
                        if (product.CompanyId == 0)
                            comment = "Product not available in the company card index.";
                        writer.AddRecord(product.Id, order.Id, product.ProductName, product.CentralIdentNumber, product.Quantity, shortage, comment);
                    }
                    writer.Write(fos);
                }
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error during dbf creation  (OrderPositions): {ex.Message}");
                return false;
            }
        }
    }
}
